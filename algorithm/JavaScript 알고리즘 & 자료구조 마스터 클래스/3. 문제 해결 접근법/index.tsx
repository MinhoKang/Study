// 1. 알고리즘이란?
// 특정 작업을 달성하기 위한 과정이나 일련의 단계

// 2. 알고리즘 공부법
// 문제 해결을 위한 계획 수립
// 일반적인 문제 해결 패턴을 파악

// 3. 문제 해결 방법
// 1) 문제 이해
// -바로 시작하기 전에 한 발짝 뒤로 물러서서 문제를 이해해라
// -문제를 내 방식대로 다시 정의할 수 있는가?
// -문제가 어떤 입력값을 담고 있는가?
// -해결책에서 나와야 하는 결과는?
// -입력값이 출력값을 결정할 수 있는가?
// -문제의 일부인 데이터의 중요한 부분에 어떻게 레이블을 지정할 수 있는가?
// 2) 구체적인 예시
// -간단한 예시로 시작
// -복잡한 예시로 확장
// -빈 입력값이 있는 예제 고려 (유효하지 않은 입력값)
// 3) 문제 세분화
// -문제를 더 작은 문제로 나누기
// -각 코드에 주석을 달아서 코드의 목적을 설명
// 4) 문제 단순화
// -문제를 해결하지 못하겠으면 더 단순한 문제를 해결
// 5) 복습 및 문제 재구성
// -결과를 확인할 수 있는가?
// -다른 방법으로 문제를 해결할 수 있는가?
// -잠깐 봐도 이해할 수 있는가?
// -다른 문제에 적용할 수 있는가?
// -더 향상시킬 수 있는가?
// -다른 방법이 있는가?
// -다른 사람들은 어떻게 해결했는가?



// 예시
// 두 숫자를 가지고 합계를 반환하는 함수

// 1) 문제 이해
// -덧셈 함수 만들기
// -정수? 소수? 문자열? 음수? 양수?
// -정수? 소수?
// -하나의 숫자만 입력된다면?

// 예시2
// 문자열을 입력받으면 각 문자의 길이를 반환하는 함수


// 2) 구체적인 예시
// charCout('hello') -> {h: 1, e: 1, l: 2, o: 1}
// 공백이나 대문자, 특수문자가 있다면?
// 빈 문자열이나 null이 입력된다면?

// 3) 문제 세분화
// -문자열을 받아서 각 문자의 길이를 반환하는 함수
const charCount = (str: string) => {
  // 객체를 반환하는 함수
  // 문자열을 받아서 loop
    // 객체 안에 숫자나 문자키가 이미 있다면 +1, 없다면 키를 추가해서 1로 설정
    // 공백이나 마침표 등이라면 무시
  // 객체를 반환
}
// 이렇게 하면 문제를 다 풀지 못하더라도 면접관에게 어떤 방향으로 생각하고 있는지 보여줄 수 있음